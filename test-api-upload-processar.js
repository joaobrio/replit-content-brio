/**
 * Script de teste para a rota unificada /api/mpmp/upload-e-processar
 * Testa o fluxo completo: upload ‚Üí extra√ß√£o ‚Üí an√°lise ‚Üí projeto
 */

const fs = require('fs');
const FormData = require('form-data');

// Configura√ß√£o
const API_URL = process.env.API_URL || 'http://localhost:5000';
const TEST_FILE_PATH = process.argv[2] || 'test-mpmp.txt';

// Cores para o console
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Criar arquivo de teste se n√£o existir
function createTestFile() {
  if (!fs.existsSync(TEST_FILE_PATH)) {
    const testContent = `
MANUAL DE POSICIONAMENTO DE MARCA PESSOAL - MPMP

DADOS DO PROFISSIONAL
Nome: Dr. Jo√£o Silva
Especialidade: Cardiologia Intervencionista
Subespecialidades: Hemodin√¢mica, Cardiologia Esportiva

PROP√ìSITO E MISS√ÉO
Prop√≥sito: Democratizar o acesso √† sa√∫de cardiovascular preventiva atrav√©s da educa√ß√£o e tecnologia
Miss√£o: Transformar a cardiologia tradicional em uma especialidade acess√≠vel e preventiva
Hist√≥ria de Origem: Ap√≥s perder meu pai para um infarto evit√°vel aos 50 anos, dediquei minha carreira a prevenir trag√©dias similares

ARQU√âTIPO E POSICIONAMENTO
Arqu√©tipo: Cuidador Inovador
Superpoderes: Comunica√ß√£o m√©dica simplificada, Diagn√≥stico precoce de alto risco
Vulnerabilidades: Perfeccionismo excessivo, Dificuldade em delegar

P√öBLICO-ALVO
Demografia:
- Idade: 35-65 anos
- G√™nero: Todos
- Localiza√ß√£o: Grandes centros urbanos
- Poder Aquisitivo: Classes A e B

Psicografia:
- Dores: Medo de doen√ßas card√≠acas, Falta de tempo para cuidar da sa√∫de
- Desejos: Longevidade com qualidade, Preven√ß√£o eficaz
- Obje√ß√µes: Custo dos exames, Complexidade dos tratamentos
- Gatilhos: Hist√≥rico familiar, Sintomas de alerta

DIFERENCIAIS E METODOLOGIA
Diferenciais: 
- Protocolo exclusivo de avalia√ß√£o em 48h
- Telemedicina com monitoramento cont√≠nuo
- Linguagem acess√≠vel sem "mediqu√™s"

Metodologia: M√©todo CARDIO+ (Check-up, An√°lise, Rotina, Dieta, Indicadores, Otimiza√ß√£o)

COMUNICA√á√ÉO E IDENTIDADE VISUAL
Tom de Voz:
- Formalidade: Equilibrado
- Energia: Moderada
- Proximidade: Profissional amig√°vel

Palavras-chave: preven√ß√£o, cora√ß√£o saud√°vel, longevidade, check-up card√≠aco
Evitar: termos t√©cnicos complexos, alarmismo, promessas milagrosas

Cores da Marca: #E74C3C (vermelho vida), #2C3E50 (azul confian√ßa)
Estilo Visual: Minimalista e profissional

PRESEN√áA DIGITAL
Hashtags principais: #CardiologiaPreventiva #CoracaoSaudavel #DrJoaoCardio
Assinatura dos posts: "Seu cora√ß√£o em boas m√£os üíó | Dr. Jo√£o Silva - CRM 12345"
Bio padr√£o: "Cardiologista | Preven√ß√£o √© o melhor rem√©dio | +15 anos salvando vidas | Consultas presenciais e online üìçSP"
`;
    
    fs.writeFileSync(TEST_FILE_PATH, testContent.trim());
    log(`‚úÖ Arquivo de teste criado: ${TEST_FILE_PATH}`, 'green');
    return true;
  }
  return false;
}

// Fun√ß√£o principal de teste
async function testUploadEProcessar() {
  log('\nüöÄ TESTE DA ROTA UNIFICADA - Upload + Processamento MPMP\n', 'bright');
  
  // Verificar/criar arquivo de teste
  const fileCreated = createTestFile();
  if (fileCreated) {
    log('‚ÑπÔ∏è  Usando arquivo de teste padr√£o criado automaticamente\n', 'yellow');
  }

  // Verificar se o arquivo existe
  if (!fs.existsSync(TEST_FILE_PATH)) {
    log(`‚ùå Arquivo n√£o encontrado: ${TEST_FILE_PATH}`, 'red');
    log('   Use: node test-api-upload-processar.js <caminho-do-arquivo>', 'yellow');
    process.exit(1);
  }

  // Preparar o formul√°rio
  const form = new FormData();
  form.append('arquivo', fs.createReadStream(TEST_FILE_PATH));
  form.append('userId', 'test-user-' + Date.now());
  form.append('projectName', 'Teste Automatizado API');
  form.append('startTime', Date.now().toString());
  form.append('deleteOnError', 'true'); // Limpar em caso de erro

  log(`üìÑ Arquivo: ${TEST_FILE_PATH}`, 'cyan');
  log(`üìè Tamanho: ${fs.statSync(TEST_FILE_PATH).size} bytes`, 'cyan');
  log(`üîó Endpoint: ${API_URL}/api/mpmp/upload-e-processar\n`, 'cyan');

  try {
    log('‚è≥ Enviando arquivo e processando...', 'yellow');
    const startTime = Date.now();

    // Fazer requisi√ß√£o
    const fetch = require('node-fetch');
    const response = await fetch(`${API_URL}/api/mpmp/upload-e-processar`, {
      method: 'POST',
      body: form,
      headers: form.getHeaders()
    });

    const result = await response.json();
    const duration = ((Date.now() - startTime) / 1000).toFixed(2);

    if (response.ok && result.success) {
      log(`\n‚úÖ SUCESSO! Processamento conclu√≠do em ${duration}s\n`, 'green');
      
      // Exibir resultados
      log('üìä RESULTADOS:', 'bright');
      log('‚îÄ'.repeat(50));
      
      if (result.arquivo) {
        log('\nüìÅ Arquivo no Cloudinary:', 'blue');
        log(`   ID: ${result.arquivo.id}`);
        log(`   URL: ${result.arquivo.url}`);
        log(`   Formato: ${result.arquivo.format}`);
        log(`   P√°ginas: ${result.arquivo.pageCount || 1}`);
      }

      if (result.projeto) {
        log('\nüéØ Projeto Criado:', 'blue');
        log(`   ID: ${result.projeto.id}`);
        log(`   Nome: ${result.projeto.name}`);
        log(`   Especialidade: ${result.projeto.specialty || 'N/A'}`);
        log(`   Prop√≥sito: ${result.projeto.purpose || 'N/A'}`);
      }

      if (result.processamento) {
        log('\n‚ö° M√©tricas de Processamento:', 'blue');
        log(`   Caracteres extra√≠dos: ${result.processamento.caracteresExtraidos}`);
        log(`   Tempo total: ${(result.processamento.tempoTotal / 1000).toFixed(2)}s`);
      }

      log('\n' + '‚îÄ'.repeat(50));
      log('üéâ Teste conclu√≠do com sucesso!', 'green');

    } else {
      log(`\n‚ùå ERRO no processamento (${duration}s)\n`, 'red');
      log(`Status: ${response.status} ${response.statusText}`);
      log(`Mensagem: ${result.message || 'Erro desconhecido'}`);
      
      if (result.error) {
        log(`Detalhes: ${result.error}`);
      }
      
      if (result.stage) {
        log(`Est√°gio do erro: ${result.stage}`);
      }

      // Log completo do erro para debug
      log('\nResposta completa:', 'yellow');
      console.log(JSON.stringify(result, null, 2));
    }

  } catch (error) {
    log('\n‚ùå ERRO na requisi√ß√£o:', 'red');
    log(error.message, 'red');
    
    if (error.code === 'ECONNREFUSED') {
      log('\n‚ö†Ô∏è  Servidor n√£o est√° rodando?', 'yellow');
      log(`   Verifique se o servidor est√° ativo em ${API_URL}`, 'yellow');
    }
  }

  // Limpar arquivo de teste se foi criado automaticamente
  if (fileCreated && fs.existsSync(TEST_FILE_PATH)) {
    fs.unlinkSync(TEST_FILE_PATH);
    log('\nüßπ Arquivo de teste tempor√°rio removido', 'cyan');
  }
}

// Verificar depend√™ncias
async function checkDependencies() {
  try {
    require('form-data');
    require('node-fetch');
  } catch (error) {
    log('üì¶ Instalando depend√™ncias necess√°rias...', 'yellow');
    require('child_process').execSync('npm install form-data node-fetch', { 
      stdio: 'inherit' 
    });
  }
}

// Executar teste
(async () => {
  await checkDependencies();
  await testUploadEProcessar();
})();
