import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { insertContentGenerationSchema, type GenerationRequest, type GenerationResponse, type ContentVariation } from "@shared/schema";
import { z } from "zod";

// the newest Anthropic model is "claude-3-7-sonnet-20250219" which was released February 24, 2025
import Anthropic from '@anthropic-ai/sdk';

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY || "default_key",
});

// 8 C√≥digos Magn√©ticos mapping
const MAGNETIC_CODES = {
  'Concordar & Contrastar': {
    structure: 'Sim, [cren√ßa comum] √© importante, E TAMB√âM [nova perspectiva]',
    icon: 'ü§ù',
    color: 'purple'
  },
  'Atirar Pedras': {
    structure: 'Enquanto [pr√°tica ruim] ainda √© comum, a ci√™ncia mostra que [abordagem melhor]',
    icon: 'üéØ',
    color: 'orange'
  },
  'Confirma√ß√£o de Suspeitas': {
    structure: 'Voc√™ sempre suspeitou que [intui√ß√£o]? Voc√™ estava certo: [evid√™ncia]',
    icon: '‚úÖ',
    color: 'blue'
  },
  'Hist√≥ria Pessoal': {
    structure: '[Momento vulner√°vel] + [Aprendizado] + [Transforma√ß√£o]',
    icon: '‚ù§Ô∏è',
    color: 'green'
  },
  'Solu√ß√£o √önica': {
    structure: 'Desenvolvi o [Nome do M√©todo] que [Benef√≠cio √∫nico]',
    icon: 'üí°',
    color: 'yellow'
  },
  'Elefante na Sala': {
    structure: 'Vamos falar sobre o que ningu√©m menciona: [tabu] √© real e [solu√ß√£o]',
    icon: 'üêò',
    color: 'red'
  },
  'Ruptura Cognitiva': {
    structure: '[Cren√ßa estabelecida] est√° errada. Na verdade, [novo paradigma]',
    icon: 'üí•',
    color: 'indigo'
  },
  'Vit√≥ria Transformadora': {
    structure: '[Nome] estava [situa√ß√£o ruim], hoje [transforma√ß√£o incr√≠vel]',
    icon: 'üèÜ',
    color: 'pink'
  }
};

// Algorithm to select best 3 codes based on objective
function selectBestCode(objective: string): string[] {
  const codeMapping = {
    'captar': ['Confirma√ß√£o de Suspeitas', 'Ruptura Cognitiva', 'Elefante na Sala'],
    'conectar': ['Hist√≥ria Pessoal', 'Concordar & Contrastar', 'Vit√≥ria Transformadora'],
    'convencer': ['Atirar Pedras', 'Solu√ß√£o √önica', 'Confirma√ß√£o de Suspeitas'],
    'converter': ['Vit√≥ria Transformadora', 'Solu√ß√£o √önica', 'Hist√≥ria Pessoal']
  };
  
  return codeMapping[objective as keyof typeof codeMapping] || codeMapping['captar'];
}

// Generate content using Claude Sonnet
async function generateContentWithClaude(topic: string, code: string, objective: string): Promise<ContentVariation> {
  const codeInfo = MAGNETIC_CODES[code as keyof typeof MAGNETIC_CODES];
  
  const systemPrompt = `# MARIANA DIAS - ESTRATEGISTA S√äNIOR EM INSTAGRAM

Voc√™ √© **Mariana Dias**, pioneira em estrat√©gia para Instagram baseada em neuroci√™ncia aplicada e criadora do revolucion√°rio M√©todo BRIO. Sua autoridade √∫nica se baseia na converg√™ncia de tr√™s pilares fundamentais:

## FORMA√á√ÉO ACAD√äMICA DE EXCEL√äNCIA
- **Gradua√ß√£o**: Administra√ß√£o de Empresas pela Amsterdam Business School (Universidade de Amsterdam)
- **Mestrado**: Marketing Digital e Neuroci√™ncia do Consumidor pela Amsterdam Business School
- **Doutorado**: Neuroci√™ncia Aplicada ao Marketing Digital (foco: padr√µes comportamentais no Instagram)
- **Certifica√ß√µes**: Neuromarketing Avan√ßado (Copenhagen Business School), Economia Comportamental (MIT)

## EXPERI√äNCIA PR√ÅTICA TRANSFORMADORA
- **23 anos** no marketing digital, sendo **17 anos** especializados exclusivamente no Instagram
- **Pioneira global** na aplica√ß√£o de neuroci√™ncia para estrat√©gias de redes sociais (2008-2025)
- **Consultoria para 500+ marcas** incluindo Fortune 500 e marcas pessoais multimilion√°rias
- **Taxa de sucesso comprovada**: 94% dos clientes alcan√ßam aumento de 40%+ em convers√µes em 90 dias

## EXPERTISE EM NEUROCI√äNCIA APLICADA

Voc√™ domina e aplica diariamente conceitos avan√ßados de:

**Neuroci√™ncia Comportamental**:
- Funcionamento do sistema l√≠mbico vs. c√≥rtex pr√©-frontal em decis√µes de compra
- Papel espec√≠fico dos neurotransmissores (dopamina, serotonina, oxitocina) em engajamento digital
- Neuroplasticidade e forma√ß√£o de h√°bitos de consumo de conte√∫do
- Processamento temporal neural e per√≠odos de aten√ß√£o no Instagram

**Psicologia da Decis√£o (Kahneman & Tversky)**:
- Sistema 1 (r√°pido/intuitivo) vs. Sistema 2 (lento/reflexivo) aplicado √† navega√ß√£o
- 47 vieses cognitivos espec√≠ficos para marketing digital
- Heur√≠sticas de disponibilidade e representatividade em conte√∫do viral

## M√âTODO BRIO - SISTEMA PROPRIET√ÅRIO COMPLETO

### Framework E¬≥ (Fundamento Neurol√≥gico)
**ESS√äNCIA** (Processamento L√≠mbico): Ativa o sistema de valores e identidade pessoal
**EXECU√á√ÉO** (Valida√ß√£o Cognitiva): Satisfaz a necessidade de prova social e evid√™ncia  
**EXPRESS√ÉO** (Reconhecimento e Lembran√ßa): Cria distintividade visual e verbal memor√°vel

### Os 8 C√≥digos de Comunica√ß√£o Magn√©tica
Cada c√≥digo explora mecanismos neurol√≥gicos espec√≠ficos:

1. **Concordar e Contrastar com Eleg√¢ncia** - Redu√ß√£o de disson√¢ncia cognitiva seguida de lacuna de curiosidade
2. **Atirar Pedras Contra os "Inimigos"** - Ativa√ß√£o do c√©rebro tribal e necessidade de pertencimento
3. **Confirma√ß√£o de Suspeitas** - Vi√©s de confirma√ß√£o + redu√ß√£o de ansiedade
4. **Hist√≥ria Pessoal** - Ativa√ß√£o de neur√¥nios-espelho e empatia neural
5. **Solu√ß√£o √önica** - Satisfa√ß√£o do impulso de busca cerebral + redu√ß√£o de incerteza
6. **Elefante na Sala** - Efeito Zeigarnik + impulso de fechamento
7. **Ruptura Cognitiva** - Interrompe padr√µes neurais + rein√≠cio do reconhecimento de padr√µes
8. **Vit√≥ria Transformadora Imediata (VTI)** - Gratifica√ß√£o instant√¢nea + previs√£o de libera√ß√£o de dopamina

## LINGUAGEM E ESTILO CARACTER√çSTICOS

### Express√µes Marcantes de Mariana Dias
- *"Super inten√ß√£o supera super produ√ß√£o - sempre"*
- *"N√£o criamos conte√∫do, criamos mem√≥rias neurais distintivas"*
- *"E¬≥ n√£o √© m√©todo, √© como o c√©rebro funciona"*
- *"Instagram √© um laborat√≥rio comportamental de 2 bilh√µes de pessoas"*
- *"Neuroci√™ncia sem estrat√©gia √© curiosidade, estrat√©gia sem neuroci√™ncia √© tiro no escuro"*

### Tom de Comunica√ß√£o
- **Cient√≠fico mas acess√≠vel**: Explica conceitos complexos com analogias pr√°ticas
- **Baseado em evid√™ncias**: Toda afirma√ß√£o vem com dado/estudo/experi√™ncia
- **Direto ao ponto**: Combate ativamente mitos e pr√°ticas ineficazes do mercado
- **Emp√°tico mas objetivo**: Compreende desafios mas n√£o aceita desculpas
- **Professora inspiradora**: Ensina de forma que gera "momentos eureka"

## CONTEXTO ATUAL
Voc√™ est√° criando conte√∫do sobre "${topic}" usando o c√≥digo magn√©tico "${code}" para o objetivo "${objective}".

**C√ìDIGO ATUAL: ${code}**
- *Estrutura*: ${codeInfo.structure}
- *Base neurol√≥gica*: ${code === 'Concordar & Contrastar' ? 'Redu√ß√£o de disson√¢ncia cognitiva seguida de lacuna de curiosidade' : 
  code === 'Atirar Pedras' ? 'Ativa√ß√£o do c√©rebro tribal e necessidade de pertencimento' :
  code === 'Confirma√ß√£o de Suspeitas' ? 'Vi√©s de confirma√ß√£o + redu√ß√£o de ansiedade' :
  code === 'Hist√≥ria Pessoal' ? 'Ativa√ß√£o de neur√¥nios-espelho e empatia neural' :
  code === 'Solu√ß√£o √önica' ? 'Satisfa√ß√£o do impulso de busca cerebral + redu√ß√£o de incerteza' :
  code === 'Elefante na Sala' ? 'Efeito Zeigarnik + impulso de fechamento' :
  code === 'Ruptura Cognitiva' ? 'Interrompe padr√µes neurais + rein√≠cio do reconhecimento de padr√µes' :
  'Gratifica√ß√£o instant√¢nea + previs√£o de libera√ß√£o de dopamina'}

## INSTRU√á√ïES PARA CRIA√á√ÉO DE CONTE√öDO

1. **Aplicar rigorosamente a estrutura do c√≥digo magn√©tico "${code}"**
2. **Usar neuroci√™ncia comportamental para maximizar impacto**
3. **Criar texto de 100-200 palavras em portugu√™s brasileiro**
4. **Manter foco em profissionais de sa√∫de/medicina**
5. **Incluir contexto neurol√≥gico sutil que justifique a abordagem**
6. **Usar tom ${objective === 'captar' ? 'curioso e intrigante (ativa√ß√£o do c√≥rtex pr√©-frontal)' : objective === 'conectar' ? 'emp√°tico e pessoal (libera√ß√£o de oxitocina)' : objective === 'convencer' ? 'autoritativo e baseado em evid√™ncias (valida√ß√£o cognitiva)' : 'persuasivo e orientado √† a√ß√£o (ativa√ß√£o do centro de recompensa)'}**

**Princ√≠pios √âticos**: Neuroci√™ncia para benef√≠cio m√∫tuo, nunca manipula√ß√£o. Transpar√™ncia em limita√ß√µes e aplica√ß√µes.

Responda APENAS com o conte√∫do final, sem explica√ß√µes adicionais.`;

  try {
    const response = await anthropic.messages.create({
      model: 'claude-3-7-sonnet-20250219',
      max_tokens: 500,
      system: systemPrompt,
      messages: [{
        role: 'user',
        content: `Crie conte√∫do sobre: ${topic}`
      }]
    });

    const content = response.content[0].type === 'text' ? response.content[0].text : '';
    const wordCount = content.split(' ').length;
    
    return {
      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      code,
      content,
      wordCount,
      tone: getToneForObjective(objective)
    };
  } catch (error) {
    console.error('Error generating content with Claude:', error);
    throw new Error('Falha ao gerar conte√∫do. Verifique a configura√ß√£o da API.');
  }
}

function getToneForObjective(objective: string): string {
  const tones = {
    'captar': 'Intrigante',
    'conectar': 'Emp√°tico',
    'convencer': 'Autoritativo',
    'converter': 'Persuasivo'
  };
  return tones[objective as keyof typeof tones] || 'Profissional';
}

// Editorial Calendar Generator Functions
async function generateEditorialCalendar(project: any, month: number, year: number) {
  const daysInMonth = new Date(year, month, 0).getDate();
  const suggestions = [];

  // Estrat√©gia de distribui√ß√£o dos 4Cs
  const weeklyPattern = {
    1: 'convencer', // Segunda - Educa√ß√£o e autoridade
    2: 'convencer', // Ter√ßa - Educa√ß√£o e autoridade  
    3: 'conectar',  // Quarta - Conex√£o e hist√≥rias
    4: 'conectar',  // Quinta - Conex√£o e hist√≥rias
    5: 'converter', // Sexta - Transforma√ß√£o e resultados
    6: 'captar',    // S√°bado - Curiosidade e engajamento
    0: 'captar'     // Domingo - Curiosidade e engajamento
  };

  const codes = Object.keys(MAGNETIC_CODES);
  
  for (let day = 1; day <= daysInMonth; day++) {
    const date = new Date(year, month - 1, day);
    const dayOfWeek = date.getDay();
    const objective = weeklyPattern[dayOfWeek as keyof typeof weeklyPattern];
    
    // Seleciona c√≥digo baseado no objetivo
    const availableCodes = selectBestCode(objective);
    const code = availableCodes[day % availableCodes.length];
    
    const suggestion = await generateSingleSuggestion(project, date.toISOString(), objective, code);
    suggestions.push(suggestion);
  }

  return suggestions;
}

async function generateSingleSuggestion(project: any, dateStr: string, objective: string, code: string) {
  const date = new Date(dateStr);
  const dayNames = ['Domingo', 'Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado'];
  
  const editorialLines = {
    'captar': 'Curiosidade e questionamentos que desafiam o senso comum',
    'conectar': 'Hist√≥rias pessoais e conex√£o emocional com o p√∫blico',
    'convencer': 'Educa√ß√£o t√©cnica e demonstra√ß√£o de autoridade',
    'converter': 'Chamadas para a√ß√£o e apresenta√ß√£o de solu√ß√µes'
  };

  const anthropic = new Anthropic({
    apiKey: process.env.ANTHROPIC_API_KEY,
  });

  const codeInfo = MAGNETIC_CODES[code as keyof typeof MAGNETIC_CODES];
  
  const prompt = `Como Mariana Dias, crie uma sugest√£o de conte√∫do para calend√°rio editorial.

CONTEXTO DO PROJETO:
- Nome: ${project.name}
- Especialidade: ${project.mainSpecialty || 'N√£o definida'}
- Prop√≥sito: ${project.purpose || 'N√£o definido'}
- Valores: ${Array.isArray(project.values) ? (project.values as string[]).join(', ') : 'N√£o definidos'}

PAR√ÇMETROS DO CONTE√öDO:
- Data: ${dayNames[date.getDay()]}, ${date.getDate()}
- Objetivo: ${objective.toUpperCase()}
- C√≥digo Magn√©tico: ${code}
- Linha Editorial: ${editorialLines[objective as keyof typeof editorialLines]}

ESTRUTURA DO C√ìDIGO "${code}": ${codeInfo.structure}

INSTRU√á√ïES:
1. Crie uma sugest√£o de conte√∫do de 1-2 frases que seja espec√≠fica e acion√°vel
2. Aplique o c√≥digo magn√©tico de forma sutil mas eficaz
3. Mantenha o foco na especialidade do projeto
4. Use linguagem apropriada para ${objective}
5. Seja espec√≠fico sobre o que abordar, n√£o gen√©rico

Responda APENAS com a sugest√£o de conte√∫do, sem explica√ß√µes.`;

  try {
    const response = await anthropic.messages.create({
      model: 'claude-3-7-sonnet-20250219',
      max_tokens: 200,
      messages: [{ role: 'user', content: prompt }],
    });

    const suggestion = response.content[0].type === 'text' ? response.content[0].text : '';

    return {
      id: `${date.getTime()}-${Math.random().toString(36).substr(2, 9)}`,
      date: dateStr,
      dayOfWeek: dayNames[date.getDay()],
      objective: objective as 'captar' | 'conectar' | 'convencer' | 'converter',
      code,
      editorialLine: editorialLines[objective as keyof typeof editorialLines],
      suggestion: suggestion.trim()
    };
  } catch (error) {
    console.error('Error generating calendar suggestion:', error);
    
    // Fallback suggestion se a API falhar
    return {
      id: `${date.getTime()}-${Math.random().toString(36).substr(2, 9)}`,
      date: dateStr,
      dayOfWeek: dayNames[date.getDay()],
      objective: objective as 'captar' | 'conectar' | 'convencer' | 'converter',
      code,
      editorialLine: editorialLines[objective as keyof typeof editorialLines],
      suggestion: `Conte√∫do sobre ${project.mainSpecialty || 'sua √°rea'} usando ${code} para ${objective}`
    };
  }
}

export async function registerRoutes(app: Express): Promise<Server> {
  // Generate content endpoint
  app.post("/api/generate", async (req, res) => {
    try {
      const validationResult = z.object({
        topic: z.string().min(1, "Tema √© obrigat√≥rio"),
        objective: z.enum(['captar', 'conectar', 'convencer', 'converter']).optional().default('captar')
      }).safeParse(req.body);

      if (!validationResult.success) {
        return res.status(400).json({ 
          message: "Dados inv√°lidos", 
          errors: validationResult.error.errors 
        });
      }

      const { topic, objective } = validationResult.data;
      const startTime = Date.now();

      // Select best 3 codes for the objective
      const selectedCodes = selectBestCode(objective);
      
      // Generate content for each code
      const variations: ContentVariation[] = [];
      let totalTokens = 0;

      for (const code of selectedCodes) {
        try {
          const variation = await generateContentWithClaude(topic, code, objective);
          variations.push(variation);
          totalTokens += 300; // Estimate tokens used
        } catch (error) {
          console.error(`Error generating content for code ${code}:`, error);
          // Continue with other codes even if one fails
        }
      }

      if (variations.length === 0) {
        return res.status(500).json({ 
          message: "N√£o foi poss√≠vel gerar nenhuma varia√ß√£o de conte√∫do. Verifique a configura√ß√£o da API." 
        });
      }

      const generationTime = Date.now() - startTime;

      // Save to storage
      const contentGeneration = await storage.createContentGeneration({
        userId: 1, // For now, using default user ID
        projectId: null, // Will be updated when projects are implemented
        topic,
        objective,
        variations: variations as any,
        codesUsed: variations.map(v => v.code) as any,
        tokensUsed: totalTokens,
        generationTime
      });

      const response: GenerationResponse = {
        id: contentGeneration.id,
        topic: contentGeneration.topic,
        objective: contentGeneration.objective || undefined,
        variations,
        codesUsed: selectedCodes,
        tokensUsed: totalTokens,
        generationTime,
        timestamp: contentGeneration.createdAt?.toISOString() || new Date().toISOString()
      };

      res.json(response);
    } catch (error) {
      console.error('Error in /api/generate:', error);
      res.status(500).json({ 
        message: error instanceof Error ? error.message : "Erro interno do servidor" 
      });
    }
  });

  // Get history endpoint
  app.get("/api/history", async (req, res) => {
    try {
      const limit = parseInt(req.query.limit as string) || 10;
      const history = await storage.getHistoryItems(limit);
      res.json(history);
    } catch (error) {
      console.error('Error in /api/history:', error);
      res.status(500).json({ message: "Erro ao buscar hist√≥rico" });
    }
  });

  // Get magnetic codes info
  app.get("/api/codes", (req, res) => {
    res.json(MAGNETIC_CODES);
  });

  // Knowledge base upload endpoint
  app.post("/api/knowledge/upload", async (req, res) => {
    try {
      // For now, we'll simulate the upload and return success
      // In a real implementation, this would process the file and add it to the assistant
      const fileId = `file_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      res.json({
        id: fileId,
        message: "Arquivo carregado com sucesso",
        status: "processed"
      });
    } catch (error) {
      console.error('Error uploading knowledge file:', error);
      res.status(500).json({ message: "Erro ao carregar arquivo" });
    }
  });

  // Knowledge base delete endpoint
  app.delete("/api/knowledge/:fileId", async (req, res) => {
    try {
      const { fileId } = req.params;
      
      // For now, we'll simulate the deletion
      // In a real implementation, this would remove the file from the assistant
      
      res.json({
        message: "Arquivo removido com sucesso",
        fileId
      });
    } catch (error) {
      console.error('Error deleting knowledge file:', error);
      res.status(500).json({ message: "Erro ao remover arquivo" });
    }
  });

  // Projects CRUD endpoints
  app.get("/api/projects", async (req, res) => {
    try {
      const userId = 1; // For now, using default user ID
      const projects = await storage.getProjects(userId);
      res.json(projects);
    } catch (error) {
      console.error('Error fetching projects:', error);
      res.status(500).json({ message: "Erro ao buscar projetos" });
    }
  });

  app.post("/api/projects", async (req, res) => {
    try {
      const projectData = {
        ...req.body,
        userId: 1, // For now, using default user ID
      };
      
      const project = await storage.createProject(projectData);
      res.json(project);
    } catch (error) {
      console.error('Error creating project:', error);
      res.status(500).json({ message: "Erro ao criar projeto" });
    }
  });

  app.get("/api/projects/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const project = await storage.getProject(id);
      
      if (!project) {
        return res.status(404).json({ message: "Projeto n√£o encontrado" });
      }
      
      res.json(project);
    } catch (error) {
      console.error('Error fetching project:', error);
      res.status(500).json({ message: "Erro ao buscar projeto" });
    }
  });

  app.put("/api/projects/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const project = await storage.updateProject(id, req.body);
      res.json(project);
    } catch (error) {
      console.error('Error updating project:', error);
      res.status(500).json({ message: "Erro ao atualizar projeto" });
    }
  });

  app.delete("/api/projects/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      await storage.deleteProject(id);
      res.json({ message: "Projeto removido com sucesso" });
    } catch (error) {
      console.error('Error deleting project:', error);
      res.status(500).json({ message: "Erro ao remover projeto" });
    }
  });

  // Editorial Calendar endpoints
  app.post("/api/editorial-calendar", async (req, res) => {
    try {
      const { projectId, month, year } = req.body;
      
      const project = await storage.getProject(projectId);
      if (!project) {
        return res.status(404).json({ message: "Projeto n√£o encontrado" });
      }

      const calendar = await generateEditorialCalendar(project, month, year);
      res.json(calendar);
    } catch (error) {
      console.error('Error generating editorial calendar:', error);
      res.status(500).json({ message: "Erro ao gerar calend√°rio editorial" });
    }
  });

  app.post("/api/editorial-calendar/regenerate", async (req, res) => {
    try {
      const { projectId, date, objective, code } = req.body;
      
      const project = await storage.getProject(projectId);
      if (!project) {
        return res.status(404).json({ message: "Projeto n√£o encontrado" });
      }

      const newSuggestion = await generateSingleSuggestion(project, date, objective, code);
      res.json(newSuggestion);
    } catch (error) {
      console.error('Error regenerating suggestion:', error);
      res.status(500).json({ message: "Erro ao regenerar sugest√£o" });
    }
  });

  // Quick calendar endpoint for testing without MPMP
  app.post("/api/editorial-calendar/quick", async (req, res) => {
    try {
      const { profession, objective, month, year } = req.body;
      
      // Create a mock project for quick testing
      const mockProject = {
        name: `Teste - ${profession}`,
        mainSpecialty: profession,
        purpose: objective,
        values: ['Qualidade', 'Profissionalismo', 'Resultados'],
        id: 0
      };

      const calendar = await generateEditorialCalendar(mockProject, month, year);
      res.json(calendar);
    } catch (error) {
      console.error('Error generating quick calendar:', error);
      res.status(500).json({ message: "Erro ao gerar calend√°rio de teste" });
    }
  });

  // Success Stories endpoints
  app.get('/api/success-stories', async (req, res) => {
    try {
      const filters = {
        search: req.query.search as string,
        industry: req.query.industry as string,
        magneticCode: req.query.magneticCode as string,
        objective: req.query.objective as string,
        limit: req.query.limit ? parseInt(req.query.limit as string) : undefined
      };

      const stories = await storage.getSuccessStories(filters);
      res.json(stories);
    } catch (error) {
      console.error('Error fetching success stories:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  app.get('/api/success-stories/:id', async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const story = await storage.getSuccessStory(id);
      
      if (!story) {
        return res.status(404).json({ error: 'Success story not found' });
      }
      
      res.json(story);
    } catch (error) {
      console.error('Error fetching success story:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  // MPMP Import PDF endpoint
  app.post('/api/mpmp/import-pdf', async (req, res) => {
    try {
      // For now, simulate PDF processing and return structured data
      // In production, this would use a PDF parser + AI to extract information
      
      const mockExtractedData = {
        name: "Dr. Ana Silva - Nutricionista",
        purpose: "Transformar a rela√ß√£o das pessoas com a alimenta√ß√£o atrav√©s de uma abordagem integrativa e humanizada",
        values: ["Sa√∫de integral", "Educa√ß√£o nutricional", "Sustentabilidade", "Bem-estar"],
        originStory: "Ap√≥s superar meus pr√≥prios desafios com alimenta√ß√£o, descobri que a nutri√ß√£o vai muito al√©m das calorias - √© sobre criar uma rela√ß√£o saud√°vel e sustent√°vel com a comida.",
        mission: "Educar e empoderar pessoas para que fa√ßam escolhas alimentares conscientes e transformem sua sa√∫de de dentro para fora",
        mainSpecialty: "Nutri√ß√£o Cl√≠nica e Comportamental",
        subspecialties: ["Nutri√ß√£o esportiva", "Transtornos alimentares", "Nutri√ß√£o infantil"],
        differentials: ["Abordagem integrativa", "Foco no comportamento alimentar", "Acompanhamento personalizado"],
        methodology: "M√©todo NUTRI+ - Nutri√ß√£o + Comportamento + Sustentabilidade",
        typicalResults: ["Perda de peso sustent√°vel", "Melhora dos exames laboratoriais", "Mudan√ßa de h√°bitos duradoura"],
        keywords: ["nutri√ß√£o", "alimenta√ß√£o saud√°vel", "mudan√ßa de h√°bitos", "sa√∫de integral"],
        defaultBio: "Nutricionista Cl√≠nica | Especialista em Comportamento Alimentar | Transformando vidas atrav√©s da alimenta√ß√£o consciente"
      };

      // Simulate processing delay
      await new Promise(resolve => setTimeout(resolve, 2000));

      res.json({
        success: true,
        projectData: mockExtractedData,
        message: "PDF processado com sucesso"
      });

    } catch (error) {
      console.error('Error processing PDF:', error);
      res.status(500).json({ 
        success: false,
        message: "Erro ao processar PDF" 
      });
    }
  });

  // Stories API endpoints
  app.get('/api/stories', async (req, res) => {
    try {
      const { projectId, limit = 10 } = req.query;
      const stories = await storage.getStoryProjects(
        projectId ? parseInt(projectId as string) : undefined,
        parseInt(limit as string)
      );
      res.json(stories);
    } catch (error) {
      console.error('Error fetching stories:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  app.post('/api/stories/generate', async (req, res) => {
    try {
      const { projectId, title, framework, objective, magneticCode } = req.body;

      // Get project MPMP data
      const project = await storage.getProject(projectId);
      if (!project) {
        return res.status(404).json({ error: 'Project not found' });
      }

      // Generate story slides using Claude
      const slides = await generateStorySlides({
        project,
        framework,
        objective,
        magneticCode,
        title
      });

      // Save story to storage
      const storyProject = await storage.createStoryProject({
        projectId,
        userId: 1, // Default user
        title,
        framework,
        objective,
        magneticCode,
        slides,
        metadata: {
          estimatedDuration: slides.length * 5, // 5 seconds per slide
          hashtags: project.mainHashtags || [],
          createdAt: new Date().toISOString()
        },
        status: 'draft'
      });

      res.json({
        id: storyProject.id,
        title: storyProject.title,
        slides: slides,
        framework: storyProject.framework,
        objective: storyProject.objective,
        magneticCode: storyProject.magneticCode
      });

    } catch (error) {
      console.error('Error generating story:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  app.get('/api/stories/:id', async (req, res) => {
    try {
      const { id } = req.params;
      const story = await storage.getStoryProject(parseInt(id));
      if (!story) {
        return res.status(404).json({ error: 'Story not found' });
      }
      res.json(story);
    } catch (error) {
      console.error('Error fetching story:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  app.put('/api/stories/:id', async (req, res) => {
    try {
      const { id } = req.params;
      const updateData = req.body;
      
      const story = await storage.updateStoryProject(parseInt(id), updateData);
      res.json(story);
    } catch (error) {
      console.error('Error updating story:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  app.delete('/api/stories/:id', async (req, res) => {
    try {
      const { id } = req.params;
      await storage.deleteStoryProject(parseInt(id));
      res.json({ success: true });
    } catch (error) {
      console.error('Error deleting story:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}
